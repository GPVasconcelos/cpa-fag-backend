// ---------- Datasource & Generator ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- Enums ----------
enum TipoUsuario {
  ALUNO
  COORDENADOR
  ADMIN
}

enum EscopoFormulario {
  CURSO
  INSTITUCIONAL
}

// ---------- Models ----------
model Usuario {
  id       Int         @id @default(autoincrement())
  nome     String
  email    String      @unique
  senha    String?
  tipo     TipoUsuario
  cursoId  Int?
  turmaId  Int?
  criadoEm DateTime    @default(now())

  // relations
  curso    Curso?       @relation(fields: [cursoId], references: [id])
  turma    Turma?       @relation(fields: [turmaId], references: [id])
  criados  Formulario[] @relation("FormCriadoPor")
  logs     LogEvento[]
  Resposta Resposta[]

  @@index([tipo])
  @@index([cursoId])
  @@index([turmaId])
}

model Curso {
  id          Int          @id @default(autoincrement())
  nome        String       @unique
  turmas      Turma[]
  alunos      Usuario[]
  formularios Formulario[] // quando escopo = CURSO
  Resposta    Resposta[]

  @@index([nome])
}

model Turma {
  id         Int          @id @default(autoincrement())
  nome       String
  cursoId    Int
  curso      Curso        @relation(fields: [cursoId], references: [id])
  alunos     Usuario[]
  Formulario Formulario[]
  Resposta   Resposta[]

  @@unique([nome, cursoId])
  @@index([cursoId])
}

model Formulario {
  id          Int              @id @default(autoincrement())
  titulo      String
  descricao   String?
  escopo      EscopoFormulario
  cursoId     Int?
  turmaId     Int?
  anonimo     Boolean          @default(false)
  ativo       Boolean          @default(false)
  inicioEm    DateTime?
  fimEm       DateTime?
  criadoPorId Int
  publicadoEm DateTime?
  criadoEm    DateTime         @default(now())

  // relations
  criadoPor Usuario    @relation("FormCriadoPor", fields: [criadoPorId], references: [id])
  curso     Curso?     @relation(fields: [cursoId], references: [id])
  turma     Turma?     @relation(fields: [turmaId], references: [id])
  perguntas Pergunta[]
  respostas Resposta[]

  @@index([escopo])
  @@index([cursoId])
  @@index([turmaId])
  @@index([ativo, inicioEm, fimEm])
}

model Pergunta {
  id           Int     @id @default(autoincrement())
  formularioId Int
  tipo         String // ex.: 'texto' | 'paragrafo' | 'radio' | 'checkbox' | ...
  enunciado    String
  obrigatoria  Boolean @default(false)
  ordem        Int
  configuracao Json?

  formulario Formulario @relation(fields: [formularioId], references: [id])
  Resposta   Resposta[]

  @@unique([formularioId, ordem])
  @@index([formularioId])
}

model Resposta {
  id           Int      @id @default(autoincrement())
  formularioId Int
  perguntaId   Int
  usuarioId    Int? // null quando anonimo
  cursoId      Int?
  turmaId      Int?
  valor        Json
  criadoEm     DateTime @default(now())

  formulario Formulario @relation(fields: [formularioId], references: [id])
  pergunta   Pergunta   @relation(fields: [perguntaId], references: [id])
  usuario    Usuario?   @relation(fields: [usuarioId], references: [id])
  curso      Curso?     @relation(fields: [cursoId], references: [id])
  turma      Turma?     @relation(fields: [turmaId], references: [id])

  @@index([formularioId])
  @@index([perguntaId])
  @@index([usuarioId])
  @@index([cursoId])
  @@index([turmaId])
}

model LogEvento {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  acao       String // CREATE | UPDATE | DELETE | ACTIVATE | DEACTIVATE ...
  entidade   String // FORMULARIO | PERGUNTA | ...
  entidadeId Int
  antes      Json?
  depois     Json?
  criadoEm   DateTime @default(now())

  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId, criadoEm])
}
